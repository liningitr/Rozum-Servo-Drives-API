stages:
  - test_tutorial
  - document
  - library_win
  - update_tools
  - tutorial_win

  
before_script:
  - eval $(ssh-agent)
  - echo "$COMPANY_SRV_SSH_PRIVATE_KEY" | ssh-add -

test_tutorial:
  image: rozum/embed-gcc:latest
  stage: test_tutorial
  script:
    - cd ./c/tutorial && make && cd ./build
    - echo -en "cex 1 me\n" | nc -w1 -u $CAN_INTERFACE 2000

    - ./change_servo_id $CAN_INTERFACE:$CAN_PORT $MOTOR_ID $MOTOR_ID | tee change_servo_id.log
    - ./time_optimal_movement $CAN_INTERFACE:$CAN_PORT $MOTOR_ID 100 100 100 | tee time_optimal_movement.log
    - ./control_servo_traj_1 $CAN_INTERFACE:$CAN_PORT $MOTOR_ID | tee control_servo_traj_1.log
    - ./control_servo_traj_2 $CAN_INTERFACE:$CAN_PORT $MOTOR_ID $MOTOR_ID | tee control_servo_traj_2.log
    - ./control_servo_traj_3 $CAN_INTERFACE:$CAN_PORT $MOTOR_ID $MOTOR_ID $MOTOR_ID | tee control_servo_traj_3.log
    - ./read_any_param $CAN_INTERFACE:$CAN_PORT $MOTOR_ID | tee read_any_param.log
    - ./read_any_param_cache $CAN_INTERFACE:$CAN_PORT $MOTOR_ID | tee read_any_param_cache.log
    - ./read_errors $CAN_INTERFACE:$CAN_PORT $MOTOR_ID | tee read_errors.log
    - ./read_servo_max_velocity $CAN_INTERFACE:$CAN_PORT $MOTOR_ID | tee read_servo_max_velocity.log
    - ./read_servo_motion_queue $CAN_INTERFACE:$CAN_PORT $MOTOR_ID | tee read_servo_motion_queue.log
    - ./read_servo_trajectory_time $CAN_INTERFACE:$CAN_PORT $MOTOR_ID | tee read_servo_trajectory_time.log

    - if [ "$(grep 'ERROR:' *.log)" != "" ]; then exit 1; fi

document:
 image: rozum/embed-gcc:latest
 stage: document
 script: 
    - git checkout master
    - git reset --hard HEAD
    - git pull
    - git config --global credential.helper store
    - echo "$GITHUB_CREDENTIALS" > ~/.git-credentials
    - git push -f "$GITHUB_URL" master
    - git tag
    - cd c
    - ( cat Doxyfile ; echo "PROJECT_NUMBER=$(git tag --contains HEAD)" ) | doxygen -  
    - cd latex
    - make
    - cd ..
    - mkdir archive
    - cp latex/refman.pdf html/RR-UserAPI.pdf
    - tar -czvf archive/rr-servoapi-doc-$(git tag --contains HEAD | tr -d '\n').tar.gz html
#    - ssh -o StrictHostKeyChecking=no "$COMPANY_SRV" "echo HELLO"
#    - ssh "$COMPANY_SRV" "rm -fr $COMPANY_SRV_DOC_DIR"
    - scp -o StrictHostKeyChecking=no -r html/* "$COMPANY_SRV":"$COMPANY_SRV_DOC_DIR"
    - scp -o StrictHostKeyChecking=no -r archive "$COMPANY_SRV":"$COMPANY_SRV_DOC_DIR"
 artifacts:
    paths:
     - c/html
     - c/html/RR-UserAPI.pdf
    expire_in: 1 month
 only:
    - master

library_win:
 image: 
   name: rozum/mingw-gcc:latest
 stage: library_win
 script:
    - make -C c -e OS=win32
    - make -C c -e OS=win64
 artifacts:
    paths:
     - c/build-win-32bit/libservo_api-32bit.dll
     - c/build-win-64bit/libservo_api-64bit.dll

update_tools_win:
 image: 
   name: rozum/mingw-gcc:latest
 stage: update_tools
 script:
    - make -C c -e OS=win32
    - make -C c/tools/fw-update-tool -e OS=win32
    - make -C c/tools/cfg-update-tool -e OS=win32
 artifacts:
    paths:
     - c/tools/fw-update-tool/build-win-32bit/*.exe
     - c/tools/cfg-update-tool/build-win-32bit/*.exe

tutorial_win:
 image: 
   name: rozum/mingw-gcc:latest
 stage: tutorial_win
 script:
    - make -C c -e OS=win32
    - make -C c/tutorial -e OS=win32
 artifacts:
    paths:
     - c/tutorial/build-win-32bit/*.exe

update_tools_deb:
  image: 
   name: ubuntu:xenial
  stage: update_tools
  before_script:
    - echo 'Skipping before-script'
  script:
    - apt-get update && apt-get install -y build-essential
    - bin/package-deb.sh ${CI_COMMIT_TAG} 
  only: 
    - tags
  artifacts:
    paths:
      - build/*.deb
 
